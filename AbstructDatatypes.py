'''
Here we will discuss about the abstruct datatypes in python.
Now what are those? Like --> List, tuples, Set, Dictionaries
'''

a = [1,"Ratul",True,3.54]
b = (1,"Ratul",True,3.54)
c = {1,"Ratul",True,3.54}
d = {"Number": 1,"Name": "Ratul","Value": True, "Decimal": 3.54}

print(a)
print(b)
print(c)
print(d)

# Just like string you can access the elements of the array:

e = [23,41,11,24,35,67,24,98,20]

for i in e:
    print(i,end=" | ")
print()
for j in range(len(e)):
    print(j,end="  | ")
print()

print(e[2:5]) # will print from 2 to 4 th index
print(e[2:5:1]) # will do the same
print(e[:5])
print(e[5:])
print(e[:5:1]) # will print from 0 to 5 - 1  th index following gap of 1
print(e[5::]) # will print from 5 to len(e)-1 th index following gap of 1

a = [2,3,4,5]
b = [7,8,9,10]
print(f"[2,3,4,5] + [7,8,9,10] = {a + b}",end=" and ")
a.extend(b)
print(f"[2,3,4,5].extend([7,8,9,10]) = {a} both same.")

'''
Here we will discuss all the built in methods for list in python with their time complexity

Access & Searching:
+-------------------+--------------+-----------------+
|     Operation     |    Method    | Time Complexity |
+-------------------+--------------+-----------------+
|      Indexing     |    lst[i]    |       O(1)      |
+-------------------+--------------+-----------------+
|      Slicing      |   lst[a:b]   |      O(b-a)     |
+-------------------+--------------+-----------------+
|     Searching     |   x in lst   |       O(n)      |
+-------------------+--------------+-----------------+
| Count occurrences | lst.count(x) |       O(n)      |
+-------------------+--------------+-----------------+
|     Get index     | lst.index(x) |       O(n)      |
+-------------------+--------------+-----------------+
Insertion & Deletion
+----------------+----------------------+----------------------------------------------+
|    Operation   |        Method        |                Time Complexity               |
+----------------+----------------------+----------------------------------------------+
|     Append     |     lst.append(x)    |               *O(1) (amortized)               |
+----------------+----------------------+----------------------------------------------+
|     Insert     |   lst.insert(i, x)   |                     O(n)                     |
+----------------+----------------------+----------------------------------------------+
|     Extend     | lst.extend(iterable) | O(k) (where k is the length of the iterable) |
+----------------+----------------------+----------------------------------------------+
| Remove element |     lst.remove(x)    |                     O(n)                     |
+----------------+----------------------+----------------------------------------------+
|    Pop last    |       lst.pop()      |                     O(1)                     |
+----------------+----------------------+----------------------------------------------+
|  Pop arbitrary |      lst.pop(i)      |                     O(n)                     |
+----------------+----------------------+----------------------------------------------+
|  Delete slice  |     del lst[a:b]     |                     O(n)                     |
+----------------+----------------------+----------------------------------------------+
Sorting & Reversing:
+-----------+---------------+-----------------+
| Operation |     Method    | Time Complexity |
+-----------+---------------+-----------------+
|    Sort   |   lst.sort()  |    O(n log n)   |
+-----------+---------------+-----------------+
|   Sorted  |  sorted(lst)  |    O(n log n)   |
+-----------+---------------+-----------------+
|  Reverse  | lst.reverse() |       O(n)      |
+-----------+---------------+-----------------+
Copying & Other Operations:
+--------------------+------------------+-----------------+
|      Operation     |      Method      | Time Complexity |
+--------------------+------------------+-----------------+
|        Copy        |    lst.copy()    |       O(n)      |
+--------------------+------------------+-----------------+
| List comprehension | [x for x in lst] |       O(n)      |
+--------------------+------------------+-----------------+
|       Length       |     len(lst)     |       O(1)      |
+--------------------+------------------+-----------------+
'''

'''
Lets start discussing about tuples:

Tuple are something that we can't update directly.
'''

tuple1 = (2,3,4,5)
# To update:
list1 = list(tuple1)
list1[3] = 10
tuple1 = tuple(list1)
print(tuple1)

# So, we can do everything with tuple just like list. Only thing is we need to change the tuple to list.

# We can unpack a tuple:

fruits = ("apple", "banana", "cherry")

(green, yellow, red) = fruits

print(green)
print(yellow)
print(red)

fruits = ("apple", "banana", "cherry", "strawberry", "raspberry")

(green, yellow, *red) = fruits

print(green)
print(yellow)
print(red)

# We can join 2 tuples: 
new_tuple = tuple1 + fruits

print(new_tuple)

'''
Lets start discussing about sets:
'''

s1 = {3,4,5,6,7,8,9,10}


'''
+-------------------------------+-------------------------------------------------------------------------------+-------------------------------------+-------------------------------------------------------------+--------------------------+
|             Method            |                                  Example Code                                 |                Output               |                         Description                         |   Worst Time Complexity  |
+-------------------------------+-------------------------------------------------------------------------------+-------------------------------------+-------------------------------------------------------------+--------------------------+
|             add()             |                         s = {1, 2}; s.add(3); print(s)                        |              {1, 2, 3}              |                  Adds an element to the set                 |           O(1)           |
+-------------------------------+-------------------------------------------------------------------------------+-------------------------------------+-------------------------------------------------------------+--------------------------+
|            clear()            |                       s = {1, 2, 3}; s.clear(); print(s)                      |                set()                |              Removes all elements from the set              |           O(n)           |
+-------------------------------+-------------------------------------------------------------------------------+-------------------------------------+-------------------------------------------------------------+--------------------------+
|             copy()            |                    s = {1, 2, 3}; s2 = s.copy(); print(s2)                    |              {1, 2, 3}              |                  Returns a copy of the set                  |           O(n)           |
+-------------------------------+-------------------------------------------------------------------------------+-------------------------------------+-------------------------------------------------------------+--------------------------+
|          difference()         |            s1 = {1, 2, 3}; s2 = {2, 3, 4}; print(s1.difference(s2))           |                 {1}                 |    Returns a set containing elements in s1 but not in s2    |           O(n)           |
+-------------------------------+-------------------------------------------------------------------------------+-------------------------------------+-------------------------------------------------------------+--------------------------+
|      difference_update()      |      s1 = {1, 2, 3}; s2 = {2, 3, 4}; s1.difference_update(s2); print(s1)      |                 {1}                 |           Removes items in s1 that are also in s2           |           O(n)           |
+-------------------------------+-------------------------------------------------------------------------------+-------------------------------------+-------------------------------------------------------------+--------------------------+
|           discard()           |                     s = {1, 2, 3}; s.discard(2); print(s)                     |                {1, 3}               |            Removes specified element if it exists           |           O(1)           |
+-------------------------------+-------------------------------------------------------------------------------+-------------------------------------+-------------------------------------------------------------+--------------------------+
|         intersection()        |           s1 = {1, 2, 3}; s2 = {2, 3, 4}; print(s1.intersection(s2))          |                {2, 3}               |               Returns a set of common elements              | O(min(len(s1), len(s2))) |
+-------------------------------+-------------------------------------------------------------------------------+-------------------------------------+-------------------------------------------------------------+--------------------------+
|               &               |                 s1 = {1, 2, 3}; s2 = {2, 3, 4}; print(s1 & s2)                |                {2, 3}               |                     Intersection using &                    | O(min(len(s1), len(s2))) |
+-------------------------------+-------------------------------------------------------------------------------+-------------------------------------+-------------------------------------------------------------+--------------------------+
|     intersection_update()     |     s1 = {1, 2, 3}; s2 = {2, 3, 4}; s1.intersection_update(s2); print(s1)     |                {2, 3}               |           Modifies s1 to keep only common elements          | O(min(len(s1), len(s2))) |
+-------------------------------+-------------------------------------------------------------------------------+-------------------------------------+-------------------------------------------------------------+--------------------------+
|          isdisjoint()         |               s1 = {1, 2}; s2 = {3, 4}; print(s1.isdisjoint(s2))              |                 True                |            Checks if sets have no common elements           | O(min(len(s1), len(s2))) |
+-------------------------------+-------------------------------------------------------------------------------+-------------------------------------+-------------------------------------------------------------+--------------------------+
|           issubset()          |              s1 = {1, 2}; s2 = {1, 2, 3}; print(s1.issubset(s2))              |                 True                |            Checks if all elements of s1 are in s2           |           O(n)           |
+-------------------------------+-------------------------------------------------------------------------------+-------------------------------------+-------------------------------------------------------------+--------------------------+
|               <=              |                  s1 = {1, 2}; s2 = {1, 2, 3}; print(s1 <= s2)                 |                 True                |                    Subset check using <=                    |           O(n)           |
+-------------------------------+-------------------------------------------------------------------------------+-------------------------------------+-------------------------------------------------------------+--------------------------+
|               <               |                  s1 = {1, 2}; s2 = {1, 2, 3}; print(s1 < s2)                  |                 True                |                 Proper subset check using <                 |           O(n)           |
+-------------------------------+-------------------------------------------------------------------------------+-------------------------------------+-------------------------------------------------------------+--------------------------+
|          issuperset()         |             s1 = {1, 2, 3}; s2 = {1, 2}; print(s1.issuperset(s2))             |                 True                |           Checks if s1 contains all elements of s2          |           O(n)           |
+-------------------------------+-------------------------------------------------------------------------------+-------------------------------------+-------------------------------------------------------------+--------------------------+
|               >=              |                  s1 = {1, 2, 3}; s2 = {1, 2}; print(s1 >= s2)                 |                 True                |                   Superset check using >=                   |           O(n)           |
+-------------------------------+-------------------------------------------------------------------------------+-------------------------------------+-------------------------------------------------------------+--------------------------+
|               >               |                  s1 = {1, 2, 3}; s2 = {1, 2}; print(s1 > s2)                  |                 True                |                Proper superset check using >                |           O(n)           |
+-------------------------------+-------------------------------------------------------------------------------+-------------------------------------+-------------------------------------------------------------+--------------------------+
|             pop()             |                        s = {1, 2, 3}; s.pop(); print(s)                       |     {2, 3} (or another element)     |           Removes and returns an arbitrary element          |           O(1)           |
+-------------------------------+-------------------------------------------------------------------------------+-------------------------------------+-------------------------------------------------------------+--------------------------+
|            remove()           |                      s = {1, 2, 3}; s.remove(2); print(s)                     |                {1, 3}               |   Removes a specified element (raises error if not found)   |           O(1)           |
+-------------------------------+-------------------------------------------------------------------------------+-------------------------------------+-------------------------------------------------------------+--------------------------+
|     symmetric_difference()    |       s1 = {1, 2, 3}; s2 = {2, 3, 4}; print(s1.symmetric_difference(s2))      |                {1, 4}               | Returns a set with elements in either s1 or s2 but not both |           O(n)           |
+-------------------------------+-------------------------------------------------------------------------------+-------------------------------------+-------------------------------------------------------------+--------------------------+
|               ^               |                 s1 = {1, 2, 3}; s2 = {2, 3, 4}; print(s1 ^ s2)                |                {1, 4}               |                 Symmetric difference using ^                |           O(n)           |
+-------------------------------+-------------------------------------------------------------------------------+-------------------------------------+-------------------------------------------------------------+--------------------------+
| symmetric_difference_update() | s1 = {1, 2, 3}; s2 = {2, 3, 4}; s1.symmetric_difference_update(s2); print(s1) |                {1, 4}               |           Updates s1 with the symmetric difference          |           O(n)           |
+-------------------------------+-------------------------------------------------------------------------------+-------------------------------------+-------------------------------------------------------------+--------------------------+
|            union()            |                 s1 = {1, 2}; s2 = {2, 3}; print(s1.union(s2))                 |              {1, 2, 3}              |      Returns a new set with all elements from both sets     |   O(len(s1) + len(s2))   |
+-------------------------------+-------------------------------------------------------------------------------+-------------------------------------+-------------------------------------------------------------+--------------------------+
|               `               |                                       `                                       | `s1 = {1, 2}; s2 = {2, 3}; print(s1 |                             s2)`                            |         {1, 2, 3}        |
+-------------------------------+-------------------------------------------------------------------------------+-------------------------------------+-------------------------------------------------------------+--------------------------+
|            update()           |               s1 = {1, 2}; s2 = {2, 3}; s1.update(s2); print(s1)              |              {1, 2, 3}              |            Updates s1 with the union of s1 and s2           |   O(len(s1) + len(s2))   |
+-------------------------------+-------------------------------------------------------------------------------+-------------------------------------+-------------------------------------------------------------+--------------------------+
|               `               |                                       =`                                      |    `s1 = {1, 2}; s2 = {2, 3}; s1    |                       = s2; print(s1)`                      |         {1, 2, 3}        |
+-------------------------------+-------------------------------------------------------------------------------+-------------------------------------+-------------------------------------------------------------+--------------------------+
'''

myDict = {'Company': "Royal Enfild", 'Type': "Bike", 'CC': 350}

'''
+--------------+-----------------------------------------------------+----------------------+--------------------------------------------------------------------------------+-----------------------+
|    Method    |                     Example Code                    |        Output        |                                   Description                                  | Worst Time Complexity |
+--------------+-----------------------------------------------------+----------------------+--------------------------------------------------------------------------------+-----------------------+
| clear()      | d = {'a': 1, 'b': 2}; d.clear(); print(d)           | {}                   | Removes all elements from the dictionary                                       | O(n)                  |
+--------------+-----------------------------------------------------+----------------------+--------------------------------------------------------------------------------+-----------------------+
| copy()       | d = {'a': 1, 'b': 2}; d2 = d.copy(); print(d2)      | {'a': 1, 'b': 2}     | Returns a shallow copy of the dictionary                                       | O(n)                  |
+--------------+-----------------------------------------------------+----------------------+--------------------------------------------------------------------------------+-----------------------+
| fromkeys()   | d = dict.fromkeys(['a', 'b'], 0); print(d)          | {'a': 0, 'b': 0}     | Creates a dictionary with specified keys and value                             | O(n)                  |
+--------------+-----------------------------------------------------+----------------------+--------------------------------------------------------------------------------+-----------------------+
| get()        | d = {'a': 1, 'b': 2}; print(d.get('a'))             | 1                    | Returns the value for a key, or None if key is not found                       | O(1)                  |
+--------------+-----------------------------------------------------+----------------------+--------------------------------------------------------------------------------+-----------------------+
| items()      | d = {'a': 1, 'b': 2}; print(list(d.items()))        | [('a', 1), ('b', 2)] | Returns a list of key-value pairs                                              | O(n)                  |
+--------------+-----------------------------------------------------+----------------------+--------------------------------------------------------------------------------+-----------------------+
| keys()       | d = {'a': 1, 'b': 2}; print(list(d.keys()))         | ['a', 'b']           | Returns a list of keys                                                         | O(n)                  |
+--------------+-----------------------------------------------------+----------------------+--------------------------------------------------------------------------------+-----------------------+
| pop()        | d = {'a': 1, 'b': 2}; d.pop('a'); print(d)          | {'b': 2}             | Removes the specified key and returns its value                                | O(1)                  |
+--------------+-----------------------------------------------------+----------------------+--------------------------------------------------------------------------------+-----------------------+
| popitem()    | d = {'a': 1, 'b': 2}; d.popitem(); print(d)         | {'a': 1}             | Removes and returns the last inserted key-value pair                           | O(1)                  |
+--------------+-----------------------------------------------------+----------------------+--------------------------------------------------------------------------------+-----------------------+
| setdefault() | d = {'a': 1}; print(d.setdefault('b', 2)); print(d) | 2, {'a': 1, 'b': 2}  | Returns the value of a key, or inserts the key with a default value if missing | O(1)                  |
+--------------+-----------------------------------------------------+----------------------+--------------------------------------------------------------------------------+-----------------------+
| update()     | d = {'a': 1}; d.update({'b': 2}); print(d)          | {'a': 1, 'b': 2}     | Updates dictionary with key-value pairs                                        | O(n)                  |
+--------------+-----------------------------------------------------+----------------------+--------------------------------------------------------------------------------+-----------------------+
| values()     | d = {'a': 1, 'b': 2}; print(list(d.values()))       | [1, 2]               | Returns a list of values in the dictionary                                     | O(n)                  |
+--------------+-----------------------------------------------------+----------------------+--------------------------------------------------------------------------------+-----------------------+
'''
